class Leaf:
    def __init__(self, value):
        self.left = None
        self.right = None
        self.value = value


class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        new_node = Leaf(value)
        if self.root is None:
            self.root = new_node
        else:
            current_node = self.root
            while True:
                if value < current_node.value :
                    if current_node.left is None:
                        current_node.left = new_node
                        return self
                    current_node = current_node.left
                else:
                    if current_node.right is None:
                        current_node.right = new_node
                        return self
                    current_node = current_node.right
        return self.root

    def traverse(self, current_node, list, stack):
        while len(stack) > 0:
            current_node = stack[0]
            list.append(current_node.value)
            stack.pop(0)
            if current_node.left is not None:
                stack.append(current_node.left)
            if current_node.right is not None:
                stack.append(current_node.right)

        return list

    def order(self):
        print(self.traverse(self.root, [], [self.root]))
        return self.traverse(self.root, [], [self.root])